class Solution {
public:
    vector<int> prefix_fn(string s) {
        int n = s.size();
        vector<int> pi(n);
        for (int i = 1; i < n; i++) {
            int j = pi[i - 1];
            while (j > 0 && s[i] != s[j]) {
                j = pi[j - 1];
            }

            if (s[i] == s[j]) j++;

            pi[i] = j;
        }
        return pi;
    }

    bool is_present(string text, string pattern) {
        vector<int> pi = prefix_fn(pattern);
        int i = 0, j = 0;
        while (i < text.size()) {
            if (text[i] == pattern[j]) {
                i++;
                j++;
            } 
            else {
                if (j != 0) j = pi[j - 1];
                else  i++;
            }

            if (j == pattern.size())
                return true;
        }
        return false;
    }

    vector<string> stringMatching(vector<string>& words) {
        vector<string> ans;
        for (int i = 0; i < words.size(); i++) {
            for (int j = 0; j < words.size(); j++) {
                if (i == j) continue;

                if (is_present(words[j], words[i])){
                    ans.push_back(words[i]);
                    break;
                    }
            }
        }
        return ans;
    }
};
